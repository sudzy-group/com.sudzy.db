var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
System.register("src/validators/mobile", [], function (exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    function mobile(input) {
        var phoneRegex = /^[0-9]{9,14}$/;
        return phoneRegex.test(input);
    }
    exports_1("mobile", mobile);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/lengthGreater1", [], function (exports_2, context_2) {
    "use strict";
    var __moduleName = context_2 && context_2.id;
    function lengthGreater1(input) {
        return input.toString().length > 1;
    }
    exports_2("lengthGreater1", lengthGreater1);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/email", [], function (exports_3, context_3) {
    "use strict";
    var __moduleName = context_3 && context_3.id;
    function email(input) {
        var emailRegex = /^[A-Za-z0-9._]*\@[A-Za-z]*\.[A-Za-z]{2,5}$/;
        return emailRegex.test(input);
    }
    exports_3("email", email);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/autocomplete", [], function (exports_4, context_4) {
    "use strict";
    var __moduleName = context_4 && context_4.id;
    function autocomplete(input) {
        var autocompleteRegex = /^[0-9]/;
        return autocompleteRegex.test(input);
    }
    exports_4("autocomplete", autocomplete);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/zip", [], function (exports_5, context_5) {
    "use strict";
    var __moduleName = context_5 && context_5.id;
    function zip(input) {
        var zipRegex = /^([0-9]{5})(?:[-\s]*([0-9]{4}))?$/;
        return zipRegex.test(input);
    }
    exports_5("zip", zip);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/latitude", [], function (exports_6, context_6) {
    "use strict";
    var __moduleName = context_6 && context_6.id;
    function latitude(input) {
        return parseInt(input) >= -90 && parseInt(input) <= 90;
    }
    exports_6("latitude", latitude);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/longitude", [], function (exports_7, context_7) {
    "use strict";
    var __moduleName = context_7 && context_7.id;
    function longitude(input) {
        return parseInt(input) >= -180 && parseInt(input) <= 180;
    }
    exports_7("longitude", longitude);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/noWhitespace", [], function (exports_8, context_8) {
    "use strict";
    var __moduleName = context_8 && context_8.id;
    function noWhitespace(input) {
        return !/\s/g.test(input);
    }
    exports_8("noWhitespace", noWhitespace);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/entities/Customer", ["pouchable", "src/validators/mobile", "src/validators/lengthGreater1", "src/validators/email", "src/validators/autocomplete", "src/validators/zip", "src/validators/latitude", "src/validators/longitude", "src/validators/noWhitespace", "lodash", "metaphone"], function (exports_9, context_9) {
    "use strict";
    var __moduleName = context_9 && context_9.id;
    var pouchable_1, mobile_1, lengthGreater1_1, email_1, autocomplete_1, zip_1, latitude_1, longitude_1, noWhitespace_1, lodash_1, metaphone, Customer;
    return {
        setters: [
            function (pouchable_1_1) {
                pouchable_1 = pouchable_1_1;
            },
            function (mobile_1_1) {
                mobile_1 = mobile_1_1;
            },
            function (lengthGreater1_1_1) {
                lengthGreater1_1 = lengthGreater1_1_1;
            },
            function (email_1_1) {
                email_1 = email_1_1;
            },
            function (autocomplete_1_1) {
                autocomplete_1 = autocomplete_1_1;
            },
            function (zip_1_1) {
                zip_1 = zip_1_1;
            },
            function (latitude_1_1) {
                latitude_1 = latitude_1_1;
            },
            function (longitude_1_1) {
                longitude_1 = longitude_1_1;
            },
            function (noWhitespace_1_1) {
                noWhitespace_1 = noWhitespace_1_1;
            },
            function (lodash_1_1) {
                lodash_1 = lodash_1_1;
            },
            function (metaphone_1) {
                metaphone = metaphone_1;
            }
        ],
        execute: function () {
            /**
             * Represent a customer entity
             */
            Customer = (function (_super) {
                __extends(Customer, _super);
                function Customer() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Customer.prototype.last4 = function (mobile) {
                    return mobile.substr(-4);
                };
                return Customer;
            }(pouchable_1.Entity));
            __decorate([
                pouchable_1.EntityField({
                    group: "default",
                    name: "mobile",
                    validate: mobile_1.mobile,
                    mandatory: true,
                    description: "Customer's mobile phone",
                    search_by: ["last4", lodash_1.identity]
                })
            ], Customer.prototype, "mobile", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "default",
                    name: "allow_notifications",
                    mandatory: true,
                    description: "Customer's consent to get email / sms  notifications"
                })
            ], Customer.prototype, "allow_notifications", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "formatted",
                    name: "formatted_mobile",
                    description: "Customer's mobile phone (formatted)"
                })
            ], Customer.prototype, "formatted_mobile", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "name",
                    name: "name",
                    description: "Customer's name",
                    validate: lengthGreater1_1.lengthGreater1,
                    search_by: [metaphone, lodash_1.identity]
                })
            ], Customer.prototype, "name", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "email",
                    name: "email",
                    validate: email_1.email,
                    description: "Customer's email"
                })
            ], Customer.prototype, "email", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "autocomplete",
                    validate: autocomplete_1.autocomplete,
                    description: "Full address as captured by Google Places API"
                })
            ], Customer.prototype, "autocomplete", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "street_num",
                    description: "Street number"
                })
            ], Customer.prototype, "street_num", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "street_route",
                    validate: lengthGreater1_1.lengthGreater1,
                    description: "Street name"
                })
            ], Customer.prototype, "street_route", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "apartment",
                    description: "Apartment"
                })
            ], Customer.prototype, "apartment", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "city",
                    validate: lengthGreater1_1.lengthGreater1,
                    description: "City"
                })
            ], Customer.prototype, "city", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "state",
                    validate: lengthGreater1_1.lengthGreater1,
                    description: "State"
                })
            ], Customer.prototype, "state", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "zip",
                    validate: zip_1.zip,
                    description: "Zip code"
                })
            ], Customer.prototype, "zip", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "lat",
                    validate: latitude_1.latitude,
                    description: "Latitude"
                })
            ], Customer.prototype, "lat", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "lng",
                    validate: longitude_1.longitude,
                    description: "Longtitude"
                })
            ], Customer.prototype, "lng", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "is_doorman",
                    description: "Whether building has doorman"
                })
            ], Customer.prototype, "is_doorman", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "address",
                    name: "delivery_notes",
                    description: "Delivery Notes"
                })
            ], Customer.prototype, "delivery_notes", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "notes",
                    name: "cleaning_notes",
                    description: "Cleaning Notes"
                })
            ], Customer.prototype, "cleaning_notes", void 0);
            __decorate([
                pouchable_1.EntityField({
                    group: "payment",
                    name: "payment_customer_id",
                    validate: noWhitespace_1.noWhitespace,
                    description: "Payment customer id"
                })
            ], Customer.prototype, "payment_customer_id", void 0);
            exports_9("Customer", Customer);
        }
    };
});
System.register("src/collections/Customers", ["pouchable", "metaphone"], function (exports_10, context_10) {
    "use strict";
    var __moduleName = context_10 && context_10.id;
    var pouchable_2, metaphone, Customers;
    return {
        setters: [
            function (pouchable_2_1) {
                pouchable_2 = pouchable_2_1;
            },
            function (metaphone_2) {
                metaphone = metaphone_2;
            }
        ],
        execute: function () {
            /**
             * Represents the Customers collection
             */
            Customers = (function (_super) {
                __extends(Customers, _super);
                function Customers() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Customers.prototype.insert = function (data) {
                    data.allow_notifications = data.allow_notifications || true;
                    return _super.prototype.insert.call(this, data);
                };
                Customers.prototype.getPrefix = function () {
                    return "customer";
                };
                Customers.prototype.findByName = function (name, options) {
                    return this.find('name', metaphone(name), options);
                };
                return Customers;
            }(pouchable_2.Collection));
            exports_10("Customers", Customers);
        }
    };
});
System.register("src/validators/fourDigitsLong", [], function (exports_11, context_11) {
    "use strict";
    var __moduleName = context_11 && context_11.id;
    function fourDigitsLong(input) {
        return input.length == 4;
    }
    exports_11("fourDigitsLong", fourDigitsLong);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/validators/twoDigitsLong", [], function (exports_12, context_12) {
    "use strict";
    var __moduleName = context_12 && context_12.id;
    function twoDigitsLong(input) {
        return input.length == 2;
    }
    exports_12("twoDigitsLong", twoDigitsLong);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/entities/CustomerCard", ["pouchable", "lodash", "src/validators/fourDigitsLong", "src/validators/twoDigitsLong", "src/validators/lengthGreater1", "src/validators/noWhitespace"], function (exports_13, context_13) {
    "use strict";
    var __moduleName = context_13 && context_13.id;
    var pouchable_3, lodash_2, fourDigitsLong_1, twoDigitsLong_1, lengthGreater1_2, noWhitespace_2, CustomerCard;
    return {
        setters: [
            function (pouchable_3_1) {
                pouchable_3 = pouchable_3_1;
            },
            function (lodash_2_1) {
                lodash_2 = lodash_2_1;
            },
            function (fourDigitsLong_1_1) {
                fourDigitsLong_1 = fourDigitsLong_1_1;
            },
            function (twoDigitsLong_1_1) {
                twoDigitsLong_1 = twoDigitsLong_1_1;
            },
            function (lengthGreater1_2_1) {
                lengthGreater1_2 = lengthGreater1_2_1;
            },
            function (noWhitespace_2_1) {
                noWhitespace_2 = noWhitespace_2_1;
            }
        ],
        execute: function () {
            /**
             * Represent a CustomerCard entity
             */
            CustomerCard = (function (_super) {
                __extends(CustomerCard, _super);
                function CustomerCard() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return CustomerCard;
            }(pouchable_3.Entity));
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "customer_id",
                    mandatory: true,
                    description: "Customer id",
                    search_by: [lodash_2.identity]
                })
            ], CustomerCard.prototype, "customer_id", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "card_id",
                    mandatory: true,
                    validate: noWhitespace_2.noWhitespace,
                    description: "Card id"
                })
            ], CustomerCard.prototype, "card_id", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "brand",
                    mandatory: true,
                    validate: lengthGreater1_2.lengthGreater1,
                    description: "Card brand"
                })
            ], CustomerCard.prototype, "brand", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "last4",
                    validate: fourDigitsLong_1.fourDigitsLong,
                    mandatory: true,
                    description: "Last 4 digits of card"
                })
            ], CustomerCard.prototype, "last4", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "exp_month",
                    description: "Expiration month"
                })
            ], CustomerCard.prototype, "exp_month", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "default",
                    name: "exp_year",
                    validate: twoDigitsLong_1.twoDigitsLong,
                    description: "Expiration year"
                })
            ], CustomerCard.prototype, "exp_year", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "settings",
                    name: "is_default",
                    description: "Whether card is default"
                })
            ], CustomerCard.prototype, "is_default", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "settings",
                    name: "is_forgotten",
                    description: "Whether card is hidden"
                })
            ], CustomerCard.prototype, "is_forgotten", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "settings",
                    name: "in_stripe",
                    description: "Whether card is stored in stripe"
                })
            ], CustomerCard.prototype, "in_stripe", void 0);
            __decorate([
                pouchable_3.EntityField({
                    group: "settings",
                    name: "stripe_token",
                    description: "Stripe token before it is turned into a card"
                })
            ], CustomerCard.prototype, "stripe_token", void 0);
            exports_13("CustomerCard", CustomerCard);
        }
    };
});
System.register("src/collections/CustomerCards", ["pouchable"], function (exports_14, context_14) {
    "use strict";
    var __moduleName = context_14 && context_14.id;
    var pouchable_4, CustomerCards;
    return {
        setters: [
            function (pouchable_4_1) {
                pouchable_4 = pouchable_4_1;
            }
        ],
        execute: function () {
            /**
             * Represents the CustomerCards collection
             */
            CustomerCards = (function (_super) {
                __extends(CustomerCards, _super);
                function CustomerCards() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CustomerCards.prototype.getPrefix = function () {
                    return "customer-card";
                };
                return CustomerCards;
            }(pouchable_4.Collection));
            exports_14("CustomerCards", CustomerCards);
        }
    };
});
System.register("src/validators/amount0OrGreater", [], function (exports_15, context_15) {
    "use strict";
    var __moduleName = context_15 && context_15.id;
    function amount0OrGreater(input) {
        return input >= 0;
    }
    exports_15("amount0OrGreater", amount0OrGreater);
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("src/entities/Order", ["pouchable", "lodash", "src/validators/amount0OrGreater", "src/validators/noWhitespace"], function (exports_16, context_16) {
    "use strict";
    var __moduleName = context_16 && context_16.id;
    var pouchable_5, lodash_3, amount0OrGreater_1, noWhitespace_3, Order;
    return {
        setters: [
            function (pouchable_5_1) {
                pouchable_5 = pouchable_5_1;
            },
            function (lodash_3_1) {
                lodash_3 = lodash_3_1;
            },
            function (amount0OrGreater_1_1) {
                amount0OrGreater_1 = amount0OrGreater_1_1;
            },
            function (noWhitespace_3_1) {
                noWhitespace_3 = noWhitespace_3_1;
            }
        ],
        execute: function () {
            /**
             * Represent a Order entity
             */
            Order = (function (_super) {
                __extends(Order, _super);
                function Order() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Order.prototype.existingBalance = function (balance) {
                    if (balance > 0) {
                        return balance;
                    }
                    else {
                        return undefined;
                    }
                };
                return Order;
            }(pouchable_5.Entity));
            __decorate([
                pouchable_5.EntityField({
                    group: "default",
                    name: "customer_id",
                    mandatory: true,
                    description: "Customer id",
                    search_by: [lodash_3.identity]
                })
            ], Order.prototype, "customer_id", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "default",
                    name: "readable_id",
                    mandatory: true,
                    validate: noWhitespace_3.noWhitespace,
                    description: "Human readable id",
                    search_by: [lodash_3.identity]
                })
            ], Order.prototype, "readable_id", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "due",
                    name: "due_datetime",
                    description: "Date order due"
                })
            ], Order.prototype, "due_datetime", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "rack",
                    name: "rack",
                    description: "Rack number"
                })
            ], Order.prototype, "rack", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "notes",
                    name: "notes",
                    description: "Order notes"
                })
            ], Order.prototype, "notes", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "payment",
                    name: "tax",
                    description: "Tax"
                })
            ], Order.prototype, "tax", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "payment",
                    name: "tip",
                    description: "Tip"
                })
            ], Order.prototype, "tip", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "payment",
                    name: "discount_percent",
                    description: "Discount percent"
                })
            ], Order.prototype, "discount_percent", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "payment",
                    name: "discount_fixed",
                    description: "Discount in dollar amount"
                })
            ], Order.prototype, "discount_fixed", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "balance",
                    name: "balance",
                    description: "Balance remaining",
                    validate: amount0OrGreater_1.amount0OrGreater,
                    search_by: ["existingBalance"]
                })
            ], Order.prototype, "balance", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "status",
                    name: "all_ready",
                    description: "Whether order is ready"
                })
            ], Order.prototype, "all_ready", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "status",
                    name: "all_pickedup",
                    description: "Whether order is back with customer"
                })
            ], Order.prototype, "all_pickedup", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "delivery",
                    name: "delivery_pickup_id",
                    validate: noWhitespace_3.noWhitespace,
                    description: "Delivery pickup id"
                })
            ], Order.prototype, "delivery_pickup_id", void 0);
            __decorate([
                pouchable_5.EntityField({
                    group: "delivery",
                    name: "delivery_dropoff_id",
                    validate: noWhitespace_3.noWhitespace,
                    description: "Delivery dropoff id"
                })
            ], Order.prototype, "delivery_dropoff_id", void 0);
            exports_16("Order", Order);
        }
    };
});
System.register("src/collections/Orders", ["pouchable", "ts-promise", "lodash"], function (exports_17, context_17) {
    "use strict";
    var __moduleName = context_17 && context_17.id;
    var pouchable_6, ts_promise_1, lodash_4, Orders;
    return {
        setters: [
            function (pouchable_6_1) {
                pouchable_6 = pouchable_6_1;
            },
            function (ts_promise_1_1) {
                ts_promise_1 = ts_promise_1_1;
            },
            function (lodash_4_1) {
                lodash_4 = lodash_4_1;
            }
        ],
        execute: function () {
            /**
             * Represents the Orders collection
             */
            Orders = (function (_super) {
                __extends(Orders, _super);
                function Orders() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Orders.prototype.getPrefix = function () {
                    return "order";
                };
                /**
                 * Get summary of all unsubmitted payments
                 */
                Orders.prototype.getUnsubmittedPayments = function () {
                    var _this = this;
                    return new ts_promise_1.default(function (resolved, rejected) {
                        _this.findIds('balance', '', { startsWith: true }).then(function (items) {
                            var vs = lodash_4.map(items, function (i) { return parseFloat(i.value); });
                            var s = lodash_4.sum(vs);
                            return resolved({ sum: s, ids: lodash_4.map(items, 'id') });
                        }).catch(function (m) { return rejected(m); });
                    });
                };
                return Orders;
            }(pouchable_6.Collection));
            exports_17("Orders", Orders);
        }
    };
});
System.register("src/entities/OrderItem", ["pouchable", "lodash", "src/validators/noWhitespace", "src/validators/amount0OrGreater"], function (exports_18, context_18) {
    "use strict";
    var __moduleName = context_18 && context_18.id;
    var pouchable_7, lodash_5, noWhitespace_4, amount0OrGreater_2, OrderItem;
    return {
        setters: [
            function (pouchable_7_1) {
                pouchable_7 = pouchable_7_1;
            },
            function (lodash_5_1) {
                lodash_5 = lodash_5_1;
            },
            function (noWhitespace_4_1) {
                noWhitespace_4 = noWhitespace_4_1;
            },
            function (amount0OrGreater_2_1) {
                amount0OrGreater_2 = amount0OrGreater_2_1;
            }
        ],
        execute: function () {
            /**
             * Represent a OrderItem entity
             */
            OrderItem = (function (_super) {
                __extends(OrderItem, _super);
                function OrderItem() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return OrderItem;
            }(pouchable_7.Entity));
            __decorate([
                pouchable_7.EntityField({
                    group: "default",
                    name: "order_id",
                    mandatory: true,
                    description: "Order id",
                    search_by: [lodash_5.identity]
                })
            ], OrderItem.prototype, "order_id", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "default",
                    name: "isbn",
                    mandatory: true,
                    validate: noWhitespace_4.noWhitespace,
                    description: "isbn"
                })
            ], OrderItem.prototype, "isbn", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "default",
                    name: "type",
                    mandatory: true,
                    description: "type"
                })
            ], OrderItem.prototype, "type", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "default",
                    name: "name",
                    mandatory: true,
                    description: "Item name"
                })
            ], OrderItem.prototype, "name", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "pricing",
                    name: "quantity",
                    validate: amount0OrGreater_2.amount0OrGreater,
                    description: "Quantity of item"
                })
            ], OrderItem.prototype, "quantity", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "pricing",
                    name: "price",
                    description: "Total price"
                })
            ], OrderItem.prototype, "price", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "notes",
                    name: "notes",
                    description: "Specific notes about this item"
                })
            ], OrderItem.prototype, "notes", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "status",
                    name: "ready",
                    description: "Specific ready status about this item"
                })
            ], OrderItem.prototype, "ready", void 0);
            __decorate([
                pouchable_7.EntityField({
                    group: "status",
                    name: "pickedup",
                    description: "Specific pickedup status about this item"
                })
            ], OrderItem.prototype, "pickedup", void 0);
            exports_18("OrderItem", OrderItem);
        }
    };
});
System.register("src/collections/OrderItems", ["pouchable"], function (exports_19, context_19) {
    "use strict";
    var __moduleName = context_19 && context_19.id;
    var pouchable_8, OrderItems;
    return {
        setters: [
            function (pouchable_8_1) {
                pouchable_8 = pouchable_8_1;
            }
        ],
        execute: function () {
            /**
             * Represents the OrderItems collection
             */
            OrderItems = (function (_super) {
                __extends(OrderItems, _super);
                function OrderItems() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OrderItems.prototype.getPrefix = function () {
                    return "order-item";
                };
                return OrderItems;
            }(pouchable_8.Collection));
            exports_19("OrderItems", OrderItems);
        }
    };
});
System.register("src/entities/OrderTag", ["pouchable", "lodash"], function (exports_20, context_20) {
    "use strict";
    var __moduleName = context_20 && context_20.id;
    var pouchable_9, lodash_6, OrderTag;
    return {
        setters: [
            function (pouchable_9_1) {
                pouchable_9 = pouchable_9_1;
            },
            function (lodash_6_1) {
                lodash_6 = lodash_6_1;
            }
        ],
        execute: function () {
            /**
             * Represent a OrderTag entity
             */
            OrderTag = (function (_super) {
                __extends(OrderTag, _super);
                function OrderTag() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return OrderTag;
            }(pouchable_9.Entity));
            __decorate([
                pouchable_9.EntityField({
                    group: "default",
                    name: "order_id",
                    description: "Order id",
                    search_by: [lodash_6.identity]
                })
            ], OrderTag.prototype, "order_id", void 0);
            __decorate([
                pouchable_9.EntityField({
                    group: "default",
                    name: "tag_number",
                    description: "Tag number"
                })
            ], OrderTag.prototype, "tag_number", void 0);
            __decorate([
                pouchable_9.EntityField({
                    group: "default",
                    name: "is_rack",
                    description: "True if this tag holds the rack of the items"
                })
            ], OrderTag.prototype, "is_rack", void 0);
            exports_20("OrderTag", OrderTag);
        }
    };
});
System.register("src/collections/OrderTags", ["pouchable"], function (exports_21, context_21) {
    "use strict";
    var __moduleName = context_21 && context_21.id;
    var pouchable_10, OrderTags;
    return {
        setters: [
            function (pouchable_10_1) {
                pouchable_10 = pouchable_10_1;
            }
        ],
        execute: function () {
            /**
             * Represents the OrderTags collection
             */
            OrderTags = (function (_super) {
                __extends(OrderTags, _super);
                function OrderTags() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OrderTags.prototype.getPrefix = function () {
                    return "order-tag";
                };
                return OrderTags;
            }(pouchable_10.Collection));
            exports_21("OrderTags", OrderTags);
        }
    };
});
System.register("src/entities/OrderCharge", ["pouchable", "lodash", "src/validators/noWhitespace"], function (exports_22, context_22) {
    "use strict";
    var __moduleName = context_22 && context_22.id;
    var pouchable_11, lodash_7, noWhitespace_5, OrderCharge;
    return {
        setters: [
            function (pouchable_11_1) {
                pouchable_11 = pouchable_11_1;
            },
            function (lodash_7_1) {
                lodash_7 = lodash_7_1;
            },
            function (noWhitespace_5_1) {
                noWhitespace_5 = noWhitespace_5_1;
            }
        ],
        execute: function () {
            /**
             * Represent a OrderCharge entity
             */
            OrderCharge = (function (_super) {
                __extends(OrderCharge, _super);
                function OrderCharge() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return OrderCharge;
            }(pouchable_11.Entity));
            __decorate([
                pouchable_11.EntityField({
                    group: "default",
                    name: "order_id",
                    mandatory: true,
                    description: "Order id",
                    search_by: [lodash_7.identity]
                })
            ], OrderCharge.prototype, "order_id", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "default",
                    name: "amount",
                    mandatory: true,
                    description: "Amount charged"
                })
            ], OrderCharge.prototype, "amount", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "default",
                    name: "charge_type",
                    description: "Charge type of cash, credit, other"
                })
            ], OrderCharge.prototype, "charge_type", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "card",
                    name: "charge_id",
                    validate: noWhitespace_5.noWhitespace,
                    description: "Charge id"
                })
            ], OrderCharge.prototype, "charge_id", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "card",
                    name: "card_id",
                    validate: noWhitespace_5.noWhitespace,
                    description: "Card id"
                })
            ], OrderCharge.prototype, "card_id", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "cash",
                    name: "date_cash",
                    description: "Get all cash deposited today in drawer if cash"
                })
            ], OrderCharge.prototype, "date_cash", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "refund",
                    name: "refund_id",
                    description: "Refund id"
                })
            ], OrderCharge.prototype, "refund_id", void 0);
            __decorate([
                pouchable_11.EntityField({
                    group: "refund",
                    name: "amount_refunded",
                    description: "Amount refunded"
                })
            ], OrderCharge.prototype, "amount_refunded", void 0);
            exports_22("OrderCharge", OrderCharge);
        }
    };
});
System.register("src/collections/OrderCharges", ["pouchable"], function (exports_23, context_23) {
    "use strict";
    var __moduleName = context_23 && context_23.id;
    var pouchable_12, OrderCharges;
    return {
        setters: [
            function (pouchable_12_1) {
                pouchable_12 = pouchable_12_1;
            }
        ],
        execute: function () {
            /**
             * Represents the OrderCharges collection
             */
            OrderCharges = (function (_super) {
                __extends(OrderCharges, _super);
                function OrderCharges() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                OrderCharges.prototype.getPrefix = function () {
                    return "order-charge";
                };
                return OrderCharges;
            }(pouchable_12.Collection));
            exports_23("OrderCharges", OrderCharges);
        }
    };
});
System.register("src/entities/Delivery", ["pouchable", "lodash", "src/validators/lengthGreater1", "src/validators/noWhitespace"], function (exports_24, context_24) {
    "use strict";
    var __moduleName = context_24 && context_24.id;
    var pouchable_13, lodash_8, lengthGreater1_3, noWhitespace_6, Delivery;
    return {
        setters: [
            function (pouchable_13_1) {
                pouchable_13 = pouchable_13_1;
            },
            function (lodash_8_1) {
                lodash_8 = lodash_8_1;
            },
            function (lengthGreater1_3_1) {
                lengthGreater1_3 = lengthGreater1_3_1;
            },
            function (noWhitespace_6_1) {
                noWhitespace_6 = noWhitespace_6_1;
            }
        ],
        execute: function () {
            /**
             * Represent a Delivery entity
             */
            Delivery = (function (_super) {
                __extends(Delivery, _super);
                function Delivery() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return Delivery;
            }(pouchable_13.Entity));
            __decorate([
                pouchable_13.EntityField({
                    group: "default",
                    name: "customer_id",
                    mandatory: true,
                    description: "Customer id"
                })
            ], Delivery.prototype, "customer_id", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "default",
                    name: "is_pickup",
                    mandatory: true,
                    description: "Whether delivery is pickup"
                })
            ], Delivery.prototype, "is_pickup", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "default",
                    name: "delivery_time",
                    mandatory: true,
                    description: "Delivery time",
                    search_by: [lodash_8.identity]
                })
            ], Delivery.prototype, "delivery_time", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "person",
                    name: "delivery_person",
                    validate: lengthGreater1_3.lengthGreater1,
                    description: "Delivery person"
                })
            ], Delivery.prototype, "delivery_person", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "notes",
                    name: "delivery_notes",
                    description: "Delivery notes"
                })
            ], Delivery.prototype, "delivery_notes", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "status",
                    name: "is_confirmed",
                    search_by: [lodash_8.identity],
                    description: "Whether store confirmed delivery"
                })
            ], Delivery.prototype, "is_confirmed", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "status",
                    name: "is_canceled",
                    description: "Whether delivery is canceled"
                })
            ], Delivery.prototype, "is_canceled", void 0);
            __decorate([
                pouchable_13.EntityField({
                    group: "express",
                    name: "express_id",
                    validate: noWhitespace_6.noWhitespace,
                    description: "Express id"
                })
            ], Delivery.prototype, "express_id", void 0);
            exports_24("Delivery", Delivery);
        }
    };
});
System.register("src/collections/Deliveries", ["pouchable"], function (exports_25, context_25) {
    "use strict";
    var __moduleName = context_25 && context_25.id;
    var pouchable_14, Deliveries;
    return {
        setters: [
            function (pouchable_14_1) {
                pouchable_14 = pouchable_14_1;
            }
        ],
        execute: function () {
            /**
             * Represents the Deliveries collection
             */
            Deliveries = (function (_super) {
                __extends(Deliveries, _super);
                function Deliveries() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Deliveries.prototype.getPrefix = function () {
                    return "delivery";
                };
                return Deliveries;
            }(pouchable_14.Collection));
            exports_25("Deliveries", Deliveries);
        }
    };
});
System.register("src/access/Database", ["pouchdb", "ts-promise", "pouchdb-authentication"], function (exports_26, context_26) {
    "use strict";
    var __moduleName = context_26 && context_26.id;
    var PouchDB, ts_promise_2, PouchableAuthentication, Database;
    return {
        setters: [
            function (PouchDB_1) {
                PouchDB = PouchDB_1;
            },
            function (ts_promise_2_1) {
                ts_promise_2 = ts_promise_2_1;
            },
            function (PouchableAuthentication_1) {
                PouchableAuthentication = PouchableAuthentication_1;
            }
        ],
        execute: function () {
            PouchDB.plugin(PouchableAuthentication);
            /**
             * Acess database local and remotely
             * User authenticated
             */
            Database = (function () {
                /**
                 * Setup local database
                 * @param name
                 */
                function Database(name) {
                    this._db = new PouchDB(name);
                }
                Database.prototype.connect = function (remoteHost, remoteDb, remoteUser, remotePass) {
                    var t = this;
                    return new ts_promise_2.default(function (resolved, rejected) {
                        if (!remoteHost || !remoteUser || !remotePass) {
                            throw new Error("Internal - cannot connect to local/remote server");
                        }
                        var url = remoteHost + "/" + remoteDb;
                        t._remoteDb = new PouchDB(url, {
                            auth: {
                                username: remoteUser,
                                password: remotePass
                            }
                        });
                        resolved(t);
                    });
                };
                Object.defineProperty(Database.prototype, "db", {
                    /**
                     * Direct access to local database
                     */
                    get: function () {
                        return this._db;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * Query remote database status
                 */
                Database.prototype.remoteStatus = function () {
                    return this._remoteDb.info();
                };
                /**
                 * Query local database status
                 */
                Database.prototype.localStatus = function () {
                    return this._db.info();
                };
                /**
                 * sync the local with remote
                 * @param options
                 */
                Database.prototype.sync = function (options) {
                    return this._db.sync(this._remoteDb, options);
                };
                return Database;
            }());
            exports_26("Database", Database);
        }
    };
});
#!/usr/bin/env node
System.register("etl/script", ["pouchdb", "lodash", "mysql", "src/collections/Customers", "src/collections/CustomerCards", "src/collections/Orders", "src/collections/OrderItems", "src/collections/OrderTags", "src/collections/OrderCharges", "src/collections/Deliveries", "src/entities/Customer", "src/entities/CustomerCard", "src/entities/Order", "src/entities/OrderItem", "src/entities/OrderTag", "src/entities/OrderCharge", "src/entities/Delivery", "commander"], function (exports_27, context_27) {
    "use strict";
    var __moduleName = context_27 && context_27.id;
    function connectPouch() {
        pouch = new PouchDB(p.remote);
        customers = new Customers_1.Customers(pouch, Customer_1.Customer);
        customer_cards = new CustomerCards_1.CustomerCards(pouch, CustomerCard_1.CustomerCard);
        orders = new Orders_1.Orders(pouch, Order_1.Order);
        deliveries = new Deliveries_1.Deliveries(pouch, Delivery_1.Delivery);
        order_items = new OrderItems_1.OrderItems(pouch, OrderItem_1.OrderItem);
        order_tags = new OrderTags_1.OrderTags(pouch, OrderTag_1.OrderTag);
        order_charges = new OrderCharges_1.OrderCharges(pouch, OrderCharge_1.OrderCharge);
    }
    function connectSQL() {
        SQLconnection = mysql.createConnection({
            host: 'localhost',
            user: 'root',
            password: '',
            database: 'pouch',
            multipleStatements: true
        });
        SQLconnection.connect(function (err) {
            if (err) {
                console.error('error connecting to mysql: ' + err.stack);
                return;
            }
            console.log('connected to mysql');
            SQLconnection.query('DELETE FROM etl_customers; DELETE FROM etl_customer_cards; DELETE FROM etl_orders; DELETE FROM etl_order_items; DELETE FROM etl_order_tags; DELETE FROM etl_order_charges; DELETE FROM etl_deliveries;', function (error, results, fields) {
                if (error)
                    throw error;
            });
        });
    }
    function copyPouchToSQL() {
        pouch.info().then(function (info) {
            return customers.find("name", "", { startsWith: true });
        }).then(function (cs) {
            //1. Copy customers from pouch to sql
            if (cs.length > 0) {
                _.each(cs, function (customer) {
                    var cus = {
                        id: customer.id,
                        created_at: customer.created_at,
                        allow_notifications: customer.allow_notifications ? 1 : 0,
                        formatted_mobile: customer.formatted_mobile,
                        mobile: customer.mobile,
                        name: customer.name,
                        email: customer.email,
                        autocomplete: customer.autocomplete,
                        street_num: customer.street_num,
                        street_route: customer.street_route,
                        apartment: customer.apartment,
                        city: customer.city,
                        state: customer.state,
                        zip: customer.zip,
                        lat: customer.lat,
                        lng: customer.lng,
                        delivery_notes: customer.delivery_notes,
                        cleaning_notes: customer.cleaning_notes,
                        payment_customer_id: customer.payment_customer_id,
                        is_doorman: customer.is_doorman ? 1 : 0
                    };
                    var query = SQLconnection.query('INSERT INTO etl_customers SET ?', cus, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return customer_cards.find("customer_id", "", { startsWith: true });
        }).then(function (crds) {
            //2. Copy customer cards from pouch to sql 
            if (crds.length > 0) {
                _.each(crds, function (card) {
                    var crd = {
                        id: card.id,
                        created_at: card.created_at,
                        customer_id: card.customer_id,
                        card_id: card.card_id,
                        brand: card.brand,
                        last4: card.last4,
                        exp_month: card.exp_month,
                        exp_year: card.exp_year,
                        is_default: card.is_default ? 1 : 0,
                        is_forgotten: card.is_forgotten ? 1 : 0,
                        in_stripe: card.in_stripe ? 1 : 0,
                        stripe_token: card.stripe_token
                    };
                    var query = SQLconnection.query('INSERT INTO etl_customer_cards SET ?', crd, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return orders.find("customer_id", "", { startsWith: true });
        }).then(function (ords) {
            //3. Copy orders from pouch to sql	   
            if (ords.length > 0) {
                _.each(ords, function (order) {
                    var ord = {
                        id: order.id,
                        created_at: order.created_at,
                        customer_id: order.customer_id,
                        readable_id: order.readable_id,
                        due_datetime: order.due_datetime ? new Date(order.due_datetime) : null,
                        rack: order.rack,
                        notes: order.notes,
                        tax: order.tax,
                        tip: order.tip,
                        discount_percent: order.discount_percent,
                        discount_fixed: order.discount_fixed,
                        balance: order.balance,
                        all_ready: order.all_ready ? 1 : 0,
                        all_pickedup: order.all_pickedup ? 1 : 0,
                        delivery_pickup_id: order.delivery_pickup_id,
                        delivery_dropoff_id: order.delivery_dropoff_id
                    };
                    var query = SQLconnection.query('INSERT INTO etl_orders SET ?', ord, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return order_items.find("order_id", "", { startsWith: true });
        }).then(function (ord_items) {
            //4. Copy order items from pouch to sql	
            if (ord_items.length > 0) {
                _.each(ord_items, function (order_item) {
                    var ord_item = {
                        id: order_item.id,
                        created_at: order_item.created_at,
                        order_id: order_item.order_id,
                        isbn: order_item.isbn,
                        type: order_item.type,
                        name: order_item.name,
                        quantity: order_item.quantity,
                        price: order_item.price,
                        separate: order_item.separate ? 1 : 0,
                        detergent: order_item.detergent,
                        preferred_wash: order_item.preferred_wash,
                        preferred_dry: order_item.preferred_dry,
                        color: order_item.color,
                        pattern: order_item.pattern,
                        brand: order_item.brand,
                        fabric: order_item.fabric
                    };
                    var query = SQLconnection.query('INSERT INTO etl_order_items SET ?', ord_item, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return order_tags.find("order_id", "", { startsWith: true });
        }).then(function (ord_tags) {
            //5. Copy order tagss from pouch to sql	
            if (ord_tags.length > 0) {
                _.each(ord_tags, function (order_tag) {
                    var ord_tag = {
                        id: order_tag.id,
                        order_id: order_tag.order_id,
                        tag_number: order_tag.tag_number
                    };
                    var query = SQLconnection.query('INSERT INTO etl_order_tags SET ?', ord_tag, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return order_charges.find("order_id", "", { startsWith: true });
        }).then(function (ord_charges) {
            //6. Copy order charges from pouch to sql	
            if (ord_charges.length > 0) {
                _.each(ord_charges, function (order_charge) {
                    var ord_charge = {
                        id: order_charge.id,
                        created_at: order_charge.created_at,
                        order_id: order_charge.order_id,
                        amount: order_charge.amount,
                        charge_type: order_charge.charge_type,
                        charge_id: order_charge.charge_id,
                        card_id: order_charge.card_id,
                        date_cash: order_charge.date_cash ? new Date(order_charge.date_cash) : null,
                        refund_id: order_charge.refund_id,
                        amount_refunded: order_charge.amount_refunded
                    };
                    var query = SQLconnection.query('INSERT INTO etl_order_charges SET ?', ord_charge, function (error, results, fields) {
                        if (error)
                            throw error;
                    });
                });
            }
            return deliveries.find("delivery_time", "", { startsWith: true });
        }).then(function (delivs) {
            //7. Copy deliveries from pouch to sql	
            if (delivs.length > 0) {
                var amount_1 = delivs.length;
                var i_1 = 0;
                _.each(delivs, function (delivery) {
                    var deliv = {
                        id: delivery.id,
                        created_at: delivery.created_at,
                        customer_id: delivery.customer_id,
                        is_pickup: delivery.is_pickup ? 1 : 0,
                        delivery_time: new Date(delivery.delivery_time),
                        delivery_person: delivery.delivery_person,
                        is_confirmed: delivery.is_confirmed ? 1 : 0,
                        is_canceled: delivery.is_canceled ? 1 : 0,
                        express_id: delivery.express_id
                    };
                    var query = SQLconnection.query('INSERT INTO etl_deliveries SET ?', deliv, function (error, results, fields) {
                        if (error)
                            throw error;
                        i_1++;
                        if (i_1 == amount_1) {
                            console.log("About to disconnect");
                            disconnectSQL();
                        }
                    });
                });
            }
            else {
                console.log("About to disconnect");
                disconnectSQL();
            }
        }).catch(_.noop);
    }
    function disconnectSQL() {
        SQLconnection.destroy();
    }
    var PouchDB, _, mysql, Customers_1, CustomerCards_1, Orders_1, OrderItems_1, OrderTags_1, OrderCharges_1, Deliveries_1, Customer_1, CustomerCard_1, Order_1, OrderItem_1, OrderTag_1, OrderCharge_1, Delivery_1, commander, p, pouch, customers, customer_cards, orders, deliveries, order_items, order_tags, order_charges, SQLconnection;
    return {
        setters: [
            function (PouchDB_2) {
                PouchDB = PouchDB_2;
            },
            function (_1) {
                _ = _1;
            },
            function (mysql_1) {
                mysql = mysql_1;
            },
            function (Customers_1_1) {
                Customers_1 = Customers_1_1;
            },
            function (CustomerCards_1_1) {
                CustomerCards_1 = CustomerCards_1_1;
            },
            function (Orders_1_1) {
                Orders_1 = Orders_1_1;
            },
            function (OrderItems_1_1) {
                OrderItems_1 = OrderItems_1_1;
            },
            function (OrderTags_1_1) {
                OrderTags_1 = OrderTags_1_1;
            },
            function (OrderCharges_1_1) {
                OrderCharges_1 = OrderCharges_1_1;
            },
            function (Deliveries_1_1) {
                Deliveries_1 = Deliveries_1_1;
            },
            function (Customer_1_1) {
                Customer_1 = Customer_1_1;
            },
            function (CustomerCard_1_1) {
                CustomerCard_1 = CustomerCard_1_1;
            },
            function (Order_1_1) {
                Order_1 = Order_1_1;
            },
            function (OrderItem_1_1) {
                OrderItem_1 = OrderItem_1_1;
            },
            function (OrderTag_1_1) {
                OrderTag_1 = OrderTag_1_1;
            },
            function (OrderCharge_1_1) {
                OrderCharge_1 = OrderCharge_1_1;
            },
            function (Delivery_1_1) {
                Delivery_1 = Delivery_1_1;
            },
            function (commander_1) {
                commander = commander_1;
            }
        ],
        execute: function () {
            p = commander
                .version('0.0.1')
                .usage('[options]')
                .option('-r, --remote [value]', 'The remote url')
                .option('-f, --float [value]', 'A float argument')
                .parse(process.argv);
            if (!p.remote) {
                console.error('no remote given!');
                process.exit(1);
            }
            connectPouch();
            connectSQL();
            copyPouchToSQL();
            ;
            ;
        }
    };
});
